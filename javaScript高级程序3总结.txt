1.script标签中的defer和async属性的区别：
    1.defer和async在网络加载过程是一致的，都是异步执行的；

　　2.两者的区别在于脚本加载完成之后何时执行，可以看出defer更符合大多数场景对应用脚本加载和执行的要求；

　　3.如果存在多个有defer属性的脚本，那么它们是按照加载顺序执行脚本的；而对于async，它的加载和执行是紧紧        挨着的，无论声明顺序如何，只要加载完成就立刻执行，它对于应用脚本用处不大，因为它完全不考虑依赖。

2.带有src属性的script标签不应该在其script标签中再包含额外的js代码，因为不会执行；另外，script
    标签中不能含有"</script>"字符串；否则会报错；

3.label语句：一般用在多层嵌套的for循环中；
    var num = 0
    outer:for(var i = 0;i<10;i++){
        for(var j = 0;j<10;j++){
            if(i == 5 && j == 5){
                break outer;
            }
            num++
        }
    }
    console.log(num);

4.with语句：作用是将代码的作用域设置到一个特定的对象中。
    var qs = location.search.substring(1);
    var hostName = location.hostname;
    var url = location.href;
    可以改写为：
    with(location){
        var qs = search.substring(1);
        var hostName =  hostname;
        var url = href;
    }
    但是大量使用with语句会使性能下降，所以要少使用with语句；

5.变量包含两种不同类型的值：基本类型值和引用类型值。在将一个值赋给变量时，要确认这个值是基本类型值还是引用类型值。
    五种基本类型数据undefined,null,boolean,number,string是按值访问的，对象是按引用类型访问的，不能直接操作对象
    的内存空间，在操作对象时，实际操作的是对象的引用而不是实际的对象。
    函数的参数都是值传递。

6.
	1.对象的属性：有两种属性，分别为数据属性和访问器属性；
	数据属性包括一个数据值的位置。有4个描述其行为的特性；分别为：configurable(表示能否通过delete删除属性从而重新定义属性),enumerable（能否通过for-in循环返回属性）,writeable（能否修改属性的值）,value（包含这个属性的数据值）;configurable设置为false后，不能再将其变回可配置的了。
	访问性属性：包含一对getter和setter函数，在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理数据；访问器属性有4个特性：
	configurable,enumerable,get,set;
	2.修改对象的属性：必须用Object.defineProperty()方法来修改对象属性；定义多个属性可以使用Object.defineProperties()方法；
	
	3.读取对象的属性：
	Object.getOwnPropertyDescriptor()；该方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable,enumerable,get和set;如果是数据属性的话，这个对象的属性有configurable,enumerable,writable和value。